plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0-Beta'
    id "io.github.patrick.remapper" version "1.4.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "io.papermc.paperweight.userdev" version "1.5.5"
    id "xyz.jpenilla.run-paper" version "2.1.0" // Adds runServer and runMojangMappedServer tasks for testing
}

group = 'com.learnspigot'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name 'codemc-snapshots'
        url 'https://repo.codemc.io/repository/maven-snapshots/'
    }
    maven {
        url "https://repo.flyte.gg/releases"
    }
}

dependencies {
    paperweight.paperDevBundle("1.20.1-R0.1-SNAPSHOT")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'net.wesjd:anvilgui:1.7.0-SNAPSHOT'
    implementation "org.mongodb:mongodb-driver-sync:4.9.0"
    implementation "gg.flyte:twilight:1.0.3"
}

build.dependsOn(shadowJar)
remap.mustRunAfter(build)

tasks {
    remap {
        version.set("1.20.1")
        archiveName.set("${project.name}-${project.version}-remapped.jar")
        mustRunAfter build
    }
}

tasks {
    // Configure reobfJar to run when invoking the build task
    assemble.dependsOn(reobfJar)

    processResources {
        def props = [
                "name": "Event",
                "version": "1",
                "description": "Core plugin",
                "apiVersion": "1.20"
        ]
        inputs.properties(props)
        filesMatching("plugin.yml") {
            expand(props)
        }
    }
}


def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

//processResources {
//    def props = [version: version]
//    inputs.properties props
//    filteringCharset 'UTF-8'
//    filesMatching('plugin.yml') {
//        expand props
//    }
//}
//kotlin {
//    jvmToolchain(17)
//}
